package com.ywf.component.splitDemo;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.GraphicsConfiguration;
import java.awt.PopupMenu;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

import org.fife.ui.rtextarea.RTextScrollPane;
import org.jdesktop.swingx.MultiSplitLayout;
import org.jdesktop.swingx.JXMultiSplitPane;
/**
 * @author Igor
 */
public class Example extends javax.swing.JFrame {
    /**
     * Creates new form Example
     */
    @Override
    public void add(Component cmpnt, Object o) {
        super.add(cmpnt, o);
    }
    @Override
    public void add(PopupMenu pm) {
        super.add(pm);
    }
    @Override
    public boolean action(Event event, Object o) {
        return super.action(event, o);
    }
    public Example(GraphicsConfiguration gc) {
        super(gc);
    }
    @Override
    public Component add(Component cmpnt, int i) {
        return super.add(cmpnt, i);
    }
    @Override
    public Component add(Component cmpnt) {
        return super.add(cmpnt);
    }
    // Initialize a MultiSplitPane
    JXMultiSplitPane multiSplitPane = new JXMultiSplitPane();
    int boxCount = 0;
    String left = " (LEAF name=left0 weight=1)";
    String right = "(LEAF name=right0 weight=0)";
    String layoutDef = "(ROW" + left + " " + right + " " + right + ")";
    MultiSplitLayout.Node modelRoot = MultiSplitLayout.parseModel(layoutDef);
    public Example() {
        setMinimumSize(new Dimension(800,600));
        //initComponents();
        multiSplitPane.getMultiSplitLayout().setModel(modelRoot);
        setLayout(new BorderLayout());
        add(new JScrollPane(multiSplitPane), BorderLayout.CENTER);
        add(new JButton("Go") {
            {
                addActionListener(e -> Example.this.addNode());
            }
        }, BorderLayout.SOUTH);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        pack();
    }
    //a function that adds a new Leaf to the multiSplitPane
    private void addNode() {
        if (boxCount == 1) {
            left = " (LEAF name=left0 weight=0.5)";
            right = " (LEAF name=right0 weight=0.5)";
        } else if (boxCount == 2) {
            left = "(LEAF name=left0 weight=0.3) (LEAF name=left" + new Integer(boxCount - 1).toString() + "  weight=0.2) ";
        } else if (boxCount == 3) {
            right = "(COLUMN weight=0.5 right0 right" + new Integer(boxCount - 2).toString() + ")";
        } else if ((boxCount % 2 == 0) && (boxCount != 0)) {
            left = left.substring(0, left.length() - 1);
            left += " left" + new Integer(boxCount / 2).toString() + ")";
        } else if ((boxCount % 2 != 0)) {
            right = right.substring(0, right.length() - 1);
            right += " right" + new Integer(boxCount / 2).toString() + ")";
        }
        String layoutDef = "(ROW " + left + " " + right + ")";
        System.out.println("当前布局："+layoutDef);
        MultiSplitLayout.Node modelRoot = MultiSplitLayout.parseModel(layoutDef);
        multiSplitPane.getMultiSplitLayout().setModel(modelRoot);
        //JTable t = new JTable(1, 1);
        RTextScrollPane t = TextAreaUtil.initScrollEditor();
        //t.getColumnModel().getColumn(0).setHeaderValue("Box Title" + boxCount);
        Dimension dimension = new Dimension(190, 190);
        t.setPreferredSize(dimension);
        //t.setRowHeight(800);
        if (boxCount == 0) {
            multiSplitPane.add(new JScrollPane(t), "left0");
        } else if (boxCount == 1) {
            multiSplitPane.add(new JScrollPane(t), "right0");
        } else if (boxCount == 2) {
            multiSplitPane.add(new JScrollPane(t), "left1");
        } else if (boxCount == 3) {
            multiSplitPane.add(new JScrollPane(t), "right1");
        } else if (boxCount % 2 == 0) {
            multiSplitPane.add(new JScrollPane(t), "left" + new Integer(boxCount / 2).toString());
        } else if (boxCount % 2 != 0) {
            multiSplitPane.add(new JScrollPane(t), "right" + new Integer(boxCount / 2).toString());
        }
        multiSplitPane.revalidate();
        boxCount++;
    }// End of AddNode *****************
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
// <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Example().setVisible(true);
            }
        });
    }
// Variables declaration - do not modify
// End of variables declaration
}